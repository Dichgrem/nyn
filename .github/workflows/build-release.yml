name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux
          - arch: armv7
            os: ubuntu-latest
            musl_toolchain: arm-linux-musleabihf-cross
            goarch: arm
          - arch: aarch64
            os: ubuntu-latest
            musl_toolchain: aarch64-linux-musl-cross
            goarch: arm64
          - arch: x86_64
            os: ubuntu-latest
            musl_toolchain: x86_64-linux-musl-cross
            goarch: amd64
          - arch: i686
            os: ubuntu-latest
            musl_toolchain: i686-linux-musl-cross
            goarch: 386
          - arch: mips64
            os: ubuntu-latest
            musl_toolchain: mips64-linux-musl-cross
            goarch: mips64
          - arch: riscv64
            os: ubuntu-latest
            musl_toolchain: riscv64-linux-musl-cross
            goarch: riscv64
          # Windows
          - arch: windows-amd64
            os: windows-latest
            goarch: amd64

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.arch }} on ${{ matrix.os }}
    env:
      LIBPCAP_VERSION: "1.10.5"
      PROJECT_NAME: "nyn"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/source

      # ========== Linux  ==========
      - name: Setup Linux variables
        if: runner.os == 'Linux'
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "MUSL_TOOLCHAIN=${{ matrix.musl_toolchain }}" >> $GITHUB_ENV
          echo "WORKSPACE=${{ github.workspace }}/build" >> $GITHUB_ENV
          echo "BINARY_NAME=$PROJECT_NAME-$VERSION-linux-${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y curl tar xz-utils make gcc

      - name: Setup musl toolchain
        if: runner.os == 'Linux'
        run: |
          mkdir -p $WORKSPACE
          cd $WORKSPACE
          curl -LO "https://musl.cc/$MUSL_TOOLCHAIN.tgz"
          tar -xzf "$MUSL_TOOLCHAIN.tgz"

      - name: Build libpcap (Linux)
        if: runner.os == 'Linux'
        run: |
          cd $WORKSPACE
          curl -LO "https://www.tcpdump.org/release/libpcap-$LIBPCAP_VERSION.tar.xz"
          tar -xf "libpcap-$LIBPCAP_VERSION.tar.xz"
          cd libpcap-$LIBPCAP_VERSION
          TRIPLET=${MUSL_TOOLCHAIN%-cross}
          CC="$WORKSPACE/$MUSL_TOOLCHAIN/bin/${TRIPLET}-gcc"
          ./configure --host=$TRIPLET --with-pcap=linux --prefix="$WORKSPACE/libpcap-install" CC="$CC"
          make -j$(nproc)
          make install

      - name: Build Linux binary
        if: runner.os == 'Linux'
        run: |
          cd ${{ github.workspace }}/source
          TRIPLET=${MUSL_TOOLCHAIN%-cross}
          CC="$WORKSPACE/$MUSL_TOOLCHAIN/bin/${TRIPLET}-gcc"
          CGO_ENABLED=1 GOOS=linux GOARCH=${{ matrix.goarch }} \
            CC="$CC" \
            CGO_LDFLAGS="-L$WORKSPACE/libpcap-install/lib -lpcap" \
            CGO_CFLAGS="-I$WORKSPACE/libpcap-install/include" \
            go build -ldflags "-s -w" -o "$WORKSPACE/$BINARY_NAME" ./cmd/nyn/

      - name: Upload Linux artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ env.WORKSPACE }}/${{ env.BINARY_NAME }}

      # ========== Windows ==========
      - name: Setup Windows variables
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $VERSION = $env:GITHUB_REF -replace '^refs/tags/v', ''
          $BINARY_NAME = "$env:PROJECT_NAME-$VERSION-windows-amd64.exe"
          Write-Output "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "BINARY_NAME=$BINARY_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Build Windows binary
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}/source"
          go build -ldflags "-s -w" -o "$env:BINARY_NAME" ./cmd/nyn/

      - name: Upload Windows artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ github.workspace }}/source/${{ env.BINARY_NAME }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: "nyn-*"
          merge-multiple: true

      - name: Verify artifacts
        run: |
          echo "=== Downloaded files ==="
          mkdir -p artifacts
          ls -lah artifacts/
          echo "========================"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            artifacts/nyn-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}